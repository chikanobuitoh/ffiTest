// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: pb/test.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SampleSerciveClient is the client API for SampleSercive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleSerciveClient interface {
	// giftUpload
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponce, error)
}

type sampleSerciveClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleSerciveClient(cc grpc.ClientConnInterface) SampleSerciveClient {
	return &sampleSerciveClient{cc}
}

func (c *sampleSerciveClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponce, error) {
	out := new(CheckResponce)
	err := c.cc.Invoke(ctx, "/grpcsample.SampleSercive/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleSerciveServer is the server API for SampleSercive service.
// All implementations must embed UnimplementedSampleSerciveServer
// for forward compatibility
type SampleSerciveServer interface {
	// giftUpload
	Check(context.Context, *CheckRequest) (*CheckResponce, error)
	mustEmbedUnimplementedSampleSerciveServer()
}

// UnimplementedSampleSerciveServer must be embedded to have forward compatible implementations.
type UnimplementedSampleSerciveServer struct {
}

func (UnimplementedSampleSerciveServer) Check(context.Context, *CheckRequest) (*CheckResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedSampleSerciveServer) mustEmbedUnimplementedSampleSerciveServer() {}

// UnsafeSampleSerciveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleSerciveServer will
// result in compilation errors.
type UnsafeSampleSerciveServer interface {
	mustEmbedUnimplementedSampleSerciveServer()
}

func RegisterSampleSerciveServer(s grpc.ServiceRegistrar, srv SampleSerciveServer) {
	s.RegisterService(&SampleSercive_ServiceDesc, srv)
}

func _SampleSercive_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleSerciveServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsample.SampleSercive/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleSerciveServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleSercive_ServiceDesc is the grpc.ServiceDesc for SampleSercive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleSercive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcsample.SampleSercive",
	HandlerType: (*SampleSerciveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _SampleSercive_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/test.proto",
}
